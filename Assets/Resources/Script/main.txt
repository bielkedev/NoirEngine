// ---------------------------------------------------------------------------------------------
// 디버깅 설정
// ---------------------------------------------------------------------------------------------
// mode
// 0 : 디버깅 기능 없음
// 1 : 간이 로그 창을 열고 로그 출력 (매우 느립니다)
// 2 : ArtemisLoggerConsole.exe 통해 표준 출력에 로그 출력 (빠릅니다. 궁리하면 편집기도 연계 할 수 있습니다)
// level
// 0 : debugprint 태그를 통한 스크립트에서 명시적인 출력 만
// 1 : 0 이외에 치명적인 것으로 보인다 오류
// 2 : 1 이외에주의를 요하는 것으로 보인다 경고
// 3 : 모든 로깅 (mode = 1의 경우 동작이 매우 늦어 지므로, mode = 2가 권장됩니다)
[debug mode="1" level="1"]

// 디버그 로그의 모습을 확인하기 위해 일부러 잘못된 태그를 기술 해 본다
// [debug]

// ------------------------------------------------ ---------------------------------------------
// 방향 변경 가능 (iPad의 경우는 대응하지 않으면 심사에 통과하지)
// ------------------------------------------------ ---------------------------------------------
[if estimate="$(s.status.screendirection == 1) || (s.status.screendirection == 3)"]
	// 본체가 옆을 향하고 있기 때문에 현재의 방향에 엔진 설정을 맞춘다
	[direction dir="$s.status.screendirection"]
	[var name="t.screendirectionprevious" data="$s.status.screendirection"]
[else]
	// 본체가 수직을 향하고 있기 때문에 엔진 설정은 기본값을 설정하려면
	[direction dir="1"]
	[var name="t.screendirectionprevious" data="1"]
[/if]
// 본체의 방향이 변경 될 때 호출 서브 루틴을 등록하는
[setondirchg file="subroutine.iet" label="ondirchg" call="1"]

// ---------------------------------------------------------------------------------------------
// 해상도 별 설정
// ---------------------------------------------------------------------------------------------
//가젤의 개인 노트. 이거 졸라 병신같은 방식이라 생각해서 전 아직도 왜 100으로 나눠서 하는지 모르겠슴다.
//이거 전 분명 나중에 짜증나서 100으로 나누는거 안하고 화면 비율상 나중에 곱하기 2.13인가 뭐 아무튼 근데 이거 쓸모 없으니
//기냥 무시하시는게. 졸라 좀 뭔가.... 여러 해상도 지원한다 뭐 그러는데 유니티에서 졸라 쓸모 없겠죠.
[var name="scrwidth"  system="screen_width" ]
[var name="scrheight" system="screen_height"]

// 이미지를 저장할 경로를 준비한다 (모델에 따라 해상도가 다르기 때문에 이미지도 다름)
[if estimate="$(scrwidth == 480) && (scrheight == 320)"]
	// -------------------------------------------------------------
	// iPhone 3G/3GS, iPod touch 1G/2G/3G
	// -------------------------------------------------------------
	// 모든 이미지를 iPhone 폴더에서 읽기 때문에 변수에 경로를 저장하는
	[var name="g.imagepath" data="iPhone/"]
	// 모든 위치 지정에 100을 들여 100으로 나누면 (등배)
	[var name="g.hratio" data="100"]
	[var name="g.vratio" data="100"]

[elseif estimate="$(scrwidth == 1024) && (scrheight == 768)"]
	// ------------------------------------------------ -------------
	// iPhone 4, iPod touch 4G, iPad, iPad 2
	// (レターボックスでフィットさせる。system.iniを参照のこと)
	// ------------------------------------------------ -------------
	// 全ての画像をiPadフォルダから読むため、変数にパスを格納する
	[var name="g.imagepath" data="iPad/"]
	// 모든 수평 위치 지정에 213을 들여 100으로 나누면 (2.13 배로)
	[var name="g.hratio" data="213"]
	// 모든 수직 위치 지정에 240을 들여 100으로 나누면 (2.4 배로)
	[var name="g.vratio" data="240"]
[else]
	[dialog title="" message="$'Not supported resolution. (' + scrwidth + 'x' + scrheight + ')'"]
	[stop]
[/if]

// ---------------------------------------------------------------------------------------------
// 기본 글꼴 설정
// ---------------------------------------------------------------------------------------------
//가젤의 개인 노트. 이런 부분은 참 기리기리랑 비슷하다고 생각해요.
//아 참고로 아르테미스는 @명령어가 없어요. 걍 다 []에요.
[fontdefault
	face         = "GulimChe.ttf"
	rubyface     = "GulimChe.ttf"
	left         = "$20  * g.hratio / 100"
	top          = "$20  * g.vratio / 100"
	width        = "$440 * g.hratio / 100"
	height       = "$280 * g.vratio / 100"
	size         = "$20  * g.hratio / 100"
	rubysize     = "$11  * g.hratio / 100"
	spacetop     = "0"
	spacemiddle  = "0"
	spacebottom  = "0"
	color        = "0xFFFFFF"
	shadowcolor  = "0x000000"
	outlinecolor = "0x000000"
	align        = "left"
	style        = "single"
	vertical     = "0"
	hung         = "1"
]
// 기본 메시지 레이어의 글꼴 설정을 fontdefault 태그로 설정 한 것에 초기화
[fontinit]

// 시나리오 텍스트가 나타나는 모습과 사라져가는 모습의 설정 (읽어있을 때)
[scetween mode="init" type="in" ]
[scetween mode="add"  type="in"  param="top"   ease="easeout_quad"  diff="$-20 * g.vratio / 100" msec="400" delay="20"]
[scetween mode="add"  type="in"  param="alpha" ease="none"          diff="-255"                  msec="400" delay="20"]
[scetween mode="init" type="out"]
[scetween mode="add"  type="out" param="top"   ease="easeout_quad"  diff="$20 * g.vratio / 100"  msec="400" delay="0"]
[scetween mode="add"  type="out" param="alpha" ease="easeout_quart" diff="-255"                  msec="400" delay="0"]

// 시나리오 텍스트가 나타나는 모습과 사라져가는 모습의 설정 (일시적으로 보이지 않을 때)
[scetween mode="init" type="show" ]
[scetween mode="add"  type="show" param="alpha" ease="none" diff="-255" msec="400" delay="0"]
[scetween mode="init" type="hide"]
[scetween mode="add"  type="hide" param="alpha" ease="none" diff="-255" msec="400" delay="0"]

//가젤의 개인 노트. 여기 존나 쓸모 없어요. 이 윗부분은 텍스트 연출이니 연구 가치가 0.1mg이라도 있지 아르테미스 백로그 병신이라
//백로그는 씹어도...
// 백 로그 되감기시 이전이 나타나는 모습의 설정
[scetween mode="init" type="backlog_down_in" ]
[scetween mode="add"  type="backlog_down_in"  param="top"   ease="easeout_sine" diff="$-120 * g.vratio / 100" msec="400" delay="0"]
[scetween mode="add"  type="backlog_down_in"  param="alpha" ease="none"         diff= "-255" msec="400" delay="0"]
// 백 로그 되감기 때 지금보고있는 페이지가 사라져가는 모습의 설정
[scetween mode="init" type="backlog_down_out"]
[scetween mode="add"  type="backlog_down_out" param="top"   ease="easeout_sine" diff="$120 * g.vratio / 100" msec="400" delay="0"]
[scetween mode="add"  type="backlog_down_out" param="alpha" ease="none"         diff="-255" msec="400" delay="0"]
// 백 로그 보낼 때 다음 페이지가 나타나는 모습의 설정
[scetween mode="init" type="backlog_up_in"   ]
[scetween mode="add"  type="backlog_up_in"    param="top"   ease="easeout_sine" diff="$120 * g.vratio / 100" msec="400" delay="0"]
[scetween mode="add"  type="backlog_up_in"    param="alpha" ease="none"         diff="-255" msec="400" delay="0"]
// 백 로그 보낼 때 지금보고있는 페이지가 사라져가는 모습의 설정
[scetween mode="init" type="backlog_up_out"  ]
[scetween mode="add"  type="backlog_up_out"   param="top"   ease="easeout_sine" diff="$-120 * g.vratio / 100" msec="400" delay="0"]
[scetween mode="add"  type="backlog_up_out"   param="alpha" ease="none"         diff= "-255" msec="400" delay="0"]

// ---------------------------------------------------------------------------------------------
// 상단 메뉴
// ---------------------------------------------------------------------------------------------
*menu
[rp]
// ↑ 텍스트 링크 라벨에 점프 해 온 경우
// 링크가 부착되어 텍스트를 改頁 동작 지우지 않으면
// 링크가 있던 텍스트가 사라지지 않고 계속
// 다음 텍스트가 표시되어 버린다

// 메뉴에서는 자동 모드에 넣지 않도록한다
[automode allow="0"]
// 메뉴에서 텍스트 임시 삭제 기능을 사용하지 못하게하는
[hide allow="0"]
// 메뉴에서는 백 로그를 보지 못하게하는
[backlog allow="0"] // 엔진 내부의 백 로그를 사용하는 경우는 여기
// call file = "backlog"label = "disable"] // 스크립트에서 구현 한 자기 부담 백 로그의 샘플을 이용하는 경우는 이쪽
// 메뉴에서 마우스 오른쪽 클릭 메뉴에 넣지 않도록한다
[rclick allow="0"]
// 메뉴에서 자동 저장하지
[autosave allow="0"]
// 메뉴는 백 로그에 저장하지
[writebacklog mode="0"]

// 배경 이미지로드
[lyc id="0" file="$g.imagepath + 'artemis_logo'"]
// 레이어 80,85,86 번 메시지 창과 함께 버튼이므로 여기에서는 삭제
[lydel id="80"]
[lydel id="85"]
[lydel id="86"]
// 1 초 걸쳐 페이드
[trans type="1" time="1000"]

// 하이퍼 링크를 설정하는
// 클릭이나 터치를하면 실행 부분을 변경 (점프)하는
// 가장 기본적인 선택의 실현 방법
◎メニュー◎[rt]
// 클릭이나 탭 수를 시각적으로 알기 쉽게하기 위해
// 글꼴의 색상을 변경하려면
[font color="0xB9D3EE"]
// link 태그 안에있는 텍스트를 클릭 대상이되는
[link label="text"  ]텍스트에 대해[/link][rt]
[link label="image" ]이미지에 대해 (기본편)[/link][rt]
[link label="tween" ]이미지에 대해 (트윈편)[/link][rt]
[link label="sound" ]사운드에 대해[/link][rt]
[link label="input" ]문자 입력에 대해[/link][rt]
[link label="lua"   ]\Lua 스크립트 (가젤 각주 : 존나 노쓸모)[/link][rt]
// Twitter 연동 샘플을 움직이는 경우는 ↑을 한 주석으로 ↓ 주석 처리를 해제하십시오
// [link label = "top"file = "twitter.iet"\ Twitter 연동 샘플 [/ link]
// 링크는 이것으로 끝이므로, 글꼴 설정을 취소
[/font]
[rt]
// Artemis Engine 본체의 버전을 표시해 두는
// 버전은 시스템 변수에 저장되어 있기 때문에,
// print 태그를 사용하여 내용을 시나리오 텍스트로보기
\엔진 버전: [print data="$s.engineversion"]
// 이후 스크립트는 실행하지
// 하이퍼 링크를 클릭 됨으로써 재개
[stop]

// ---------------------------------------------------------------------------------------------
// 본문 구성을위한 서브 루틴 (call 태그에서 여러 위치에서 호출되어 사용되는)
// ---------------------------------------------------------------------------------------------
*text_init

// 클릭 대기 글리프의 설정 //가젤의 노트. 글리프 그거에요. 대사창 끝에 있는 그 움직이는 그거. 빙글빙글 도는.
/*
// 레이어 90 번을 클릭 대기 그래프로 사용
[lyc id="90" file="$g.imagepath + 'glyph'"]
// 뒤 화면에로드 된 문양 이미지를 표 화면에 등장시키는
[flip]
// 점멸 애니메이션을 트위닝을 이용하여 표현
// 레이어에 트윈의 설정을하는 경우
// 먼저 lytweendel에서 이전에 설정 한 트윈을 제거
// (lyc하면 자동으로 lytweendel 한 것이기 때문에,
// 원래 여기에서는 필요 없지만, 실행하도록 습관화하여
// 두었다 편이 실수가 적다)
[lytweendel id="90"]
[lytween id="90" param="alpha"  ease="none" from="0"  to="255" msec="1000" yoyo="-1"]
[lytween id="90" param="xscale" ease="none" from="70" to="100" msec="1000" yoyo="-1"]
[lytween id="90" param="yscale" ease="none" from="70" to="100" msec="1000" yoyo="-1"]
// 그래프 이미지를 가져온 레이어를 그래프 레이어로 설정
// 텍스트의 끝에 추적하고 예쁘게 보이도록 7 픽셀 아래에 비틀
[glyph layer="90" homing="1" top="7"]
*/
// 이곳은 애니메이션 그래프의 예
[var name="i" data="0"]
[loop estimate="$i < 30"]
	[if estimate="$i == 0"]
		// 가장 먼저 mode = "init"라고해야한다
		[anime id="90" mode="init" file="blueglyph/glyph0" xscale="$g.hratio" yscale="$g.hratio"]
	[/if]
	[if estimate="$i != 0"]
		// 다음부터는 mode = "add"로
		[anime id="90" mode="add" file="$'blueglyph/glyph' + i" time="$i * 33" xscale="$g.hratio" yscale="$g.hratio"]
	[/if]
	[var name="i" data="$i + 1"]
[/loop]
// 마지막 프레임의 지속 시간을 설정
[anime id="90" mode="end" time="$i * 33"]

// 레이어를 글리프로 처리하도록 설정
[if estimate="$g.hratio == 100"]
	// 위치 조정 필요
	[glyph layer="90" homing="1"]
[else]
	// 위치 조정 필요
	[glyph layer="90" homing="1" top="18"]
[/if]

// 메시지 창 임시 삭제 버튼 설치 (button 매크로를 사용하고 있습니다)
[button id="85" rollout="$g.imagepath + 'button_x'" rollover="$g.imagepath + 'button_x_o'" clickablethreshold="128" file="main.iet" label="hidein" call="1"]
[lyprop id="85" left="$450 * g.hratio / 100"]
// 자동 모드 버튼 설치 (button 매크로를 사용하고 있습니다)
[button id="86" rollout="$g.imagepath + 'button_allow'" rollover="$g.imagepath + 'button_allow_o'" clickablethreshold="128" file="main.iet" label="automodein" call="1"]
[lyprop id="86" left="$420 * g.hratio / 100"]

// 자동 모드에 들어갈 수있게하는
[automode allow="1"]

// 텍스트 임시 삭제 기능을 사용할 수있게하는
// 레이어 80를 메시지 창으로 사용
[lyc id="80" file="$g.imagepath + 'mw'"]
// [lyprop id = "80"left = "10"top = "10"]
// 0.5 초 동안 페이드
[trans type="1" time="500"]
// 메시지 창 및 버튼 이미지를 가져온 레이어를
// 메시지 창 레이어로 설정
// (설정 해두면 텍스트 임시 삭제시에 함께 사라집니다)
[hide allow="1" window="80,85,86"]

// 백 로그를 볼 수있게하는
[backlog allow="1"] // エンジン内蔵のバックログを用いる場合はこちら
// call file = "backlog"label = "enable"] // 스크립트에서 구현 한 자기 부담 백 로그의 샘플을 이용하는 경우는 이쪽
// 앞으로보기 시나리오 텍스트를 백 로그에 저장하도록한다
[writebacklog mode="1"]

// 오른쪽 클릭 메뉴에 들어갈 수있게하는
// (Windows에서는 오른쪽 클릭 iOS에서 두 손가락 탭하면 rclick.iet가 자동으로 호출되는)
[rclick allow="1"]

// 자동 저장을 사용하려면
[autosave allow="1"]

// 서브 루틴은 반드시 return 태그로 끝나는
[return]

// ---------------------------------------------------------------------------------------------
// 메시지 창 임시 삭제를 버튼에서 실행하기위한 서브 루틴
// ---------------------------------------------------------------------------------------------
*hidein

// 메시지 창 임시 삭제하는 동안 버튼을 비활성화
[buttondisable id="85"]
[buttondisable id="86"]
[flip]
// 메시지 창 임시 삭제 완료 후 버튼을 활성화하기 위해 이벤트를 설정
[setonhideout file="main.iet" label="hideout" call="1"]
// 메시지 창 임시 삭제를 실행
[exec command="hide"]

[return]

// ---------------------------------------------------------------------------------------------
// 메시지 창 임시 삭제가 끝날 때 호출되는 서브 루틴
// ---------------------------------------------------------------------------------------------
*hideout

// 메시지 창 임시 삭제가 끝날 때 서브 루틴을 호출 설정 해제
[delonhideout]
// 해제하고 버튼을 취소
[buttonenable id="85" rollout="$g.imagepath + 'button_x'" rollover="$g.imagepath + 'button_x_o'" file="main.iet" label="hidein" call="1"]
[buttonenable id="86" rollout="$g.imagepath + 'button_allow'" rollover="$g.imagepath + 'button_allow_o'" file="main.iet" label="automodein" call="1"]
[flip]

[return]

// ---------------------------------------------------------------------------------------------
// 오토 모드 시작 버튼에서 실행하기위한 서브 루틴
// ---------------------------------------------------------------------------------------------
*automodein

[exec command="automode"]

[return]

// ---------------------------------------------------------------------------------------------
// 메시지 창을 일시적으로 숨길 서브 루틴
// ---------------------------------------------------------------------------------------------
*mwout

[lyprop id="80" visible="0"]
[trans type="1" time="500"]

[return]

// ---------------------------------------------------------------------------------------------
// 메시지 창을 일시적으로 숨길 수 있었던 취소 루틴
// ---------------------------------------------------------------------------------------------
*mwin

[lyprop id="80" visible="1"]
[trans type="1" time="500"]

[return]

// ---------------------------------------------------------------------------------------------
// 텍스트에 대해
// ---------------------------------------------------------------------------------------------
*text
[rp]
// ↑ 텍스트 링크 라벨에 점프 해 온 경우
// 링크가 부착되어 텍스트를 改頁 동작 지우지 않으면
// 링크가 있던 텍스트가 사라지지 않고 계속
// 다음 텍스트가 표시되어 버린다

// 본문을 초기화하기
[call label="text_init"]

\테\스\트\중\입\니\당
테스트
					               안녕하십니까?@[rt]
안녕하세요?                                                                              [rt]
다녀오겠습니다.@[rt]
                        다녀오겠어요.@[rp]

			다녀왔습니다.@[rt]
			  다녀왔어요.@[rt]
어서오십시오.@[rt]
어서오세요. ㅇㄴㅇㅁㅇㄴㅇㄴ ㅇㄴㅁㅇ    ㅇ    @[rt]
안녕히 주무십시오.[rt]
안녕히 주무세요.@[rp]

これはテストスクリプトです。@[rt]
[ruby text="かいぎょう"]改行[/ruby]しました。@[rp]
//↑↓이거들은 루비 관련이라 (플밍언어 루비가 아닌 일본어의 루비라서 -한자 위에 있는 요미가나/발음법을 루비라고 해요- 생략해요.)
[ruby text="かいぺーじ"]改頁[/ruby]しました。@[rt]
クリック[ruby text="ま"]待[/ruby]ちの[ruby text="さい"]際[/ruby]に[ruby text="てんめつ"]点滅[/ruby]しているアイコンを、グリフと[ruby text="よ"]呼[/ruby]びます。@[rt]
グリフは[ruby text="いってい"]一定[/ruby]の[ruby text="いち"]位置[/ruby]に[ruby text="ひょうじ"]表示[/ruby]させることもできますが、このようにテキストの[ruby text="まつび"]末尾[/ruby]に[ruby text="ついび"]追尾[/ruby]させることもできます。@[rt]
ご[ruby text="らん"]覧[/ruby]のように、ルビをふることもできます。@[rp]

글꼴 설정은 인라인으로 변경할 수 있습니다. @ [rt]
[font color="0xFF0000"]赤@[font color="0x00FF00"]緑@[font color="0x0000FF"]青@\Blue@[/font]\Green@[/font]\Red@[/font][rp]

[font entirexscale="150" entireanchorx="0" entireanchory="0" anchorcenter="0"]横長に伸ばしてみたり…@[/font][rp]
[font entireyscale="300" entireanchorx="0" entireanchory="0" anchorcenter="0" top ="0"]縦長に伸ばしてみたり…@[/font][rp]
[font entirerotate="45"  entireanchorx="0" entireanchory="0" anchorcenter="0" left="$240 * g.hratio / 100"]
비스듬히 보거나 ... [rt]
나나 메 나나 메 나나 메 나나 메 나나 메 [rt]
나나 메 나나 메 나나 메 나나 메 나나 메 [rt]
나나 메 나나 메 나나 메 나나 메 나나 메 [rt]
나나 메 나나 메 나나 메 나나 메 나나 메 [rt]
나나 메 나나 메 나나 메 나나 메 나나 메 @
[/font] [rp]

[font xscale = "120"yscale = "120"] 문자 사이를 그대로 문자 단체를 조금 크게 해 보거나 ... @ [/font] [rt]
[font xscale = "80"yscale = "80"] 같이 작게 보거나 ... @ [/font] [rt]
[font rotate = "15"] 비스듬히 보거나 ... @ [/font] [rp]

[font style = "shadow"shadowcolor = "0x888888"] 그림자를 붙여 보거나 ... [/font] @ [rt]
[font style = "outline"color = "0x000000"outlinecolor = "0xFFFFFF"] 개요를 붙여 보거나 ... [/font] @ [rt]
[font style = "shadow, outline"color = "0x000000"shadowcolor = "0x888888"outlinecolor = "0xFFFFFF"] 그림자와 윤곽을 붙여 보거나 ... [/font] @ [rt]

등 다양한 문자 표현이 가능합니다. @ [rp]

// 세로의 글꼴 설정
// 또한 세로시 font 태그는 width가 가로, height가 눕는다
// 가로 메시지 계층을 단순히 회전하는듯한 이미지
// left와 top의 위치는 가로 때는 왼쪽이지만, 세로 때는 오른쪽된다
/*
[font
	face         = "VVlGothic"
	rubyface     = "VMplus"
	left         = "$460 * g.hratio / 100"
	top          = "$20  * g.vratio / 100"
	width        = "$280 * g.hratio / 100"
	height       = "$440 * g.vratio / 100"
	vertical     = "1"
]
[ruby text="たてが"]縦書[/ruby]きにも[ruby text="たいおう"]対応[/ruby]しています。@[rt]
[ruby text="たてが"]縦書[/ruby]きでは[ruby text="はんかく"]半角[/ruby]アルファベットは this is alphabet. のようになります。@[rp]
[/font]
*/

시나리오 텍스트는 트윈라는 구조로 애니메이션되면서 표시됩니다. @ [rt]
지금은 "20 픽셀에서 400 밀리 초 지남에 페이드 인" "문자 사이의 시간 차이 (지연)은 20 밀리 세컨드 '라는 설정으로 표시되어 있습니다. @ [rt]
설정에 따라 다양한 표시 방법이 있습니다. 예를 들면 ... @ [rp]

[scetween mode="init" type="in" ]
[scetween mode="add"  type="in"  param="alpha"        ease="none"          diff="-255" msec= "400" delay="20"]
[scetween mode="add"  type="in"  param="entirexscale" ease="easeout_quart" diff= "100" msec="1000" delay="20"]
[scetween mode="add"  type="in"  param="entireyscale" ease="easeout_quart" diff= "100" msec="1000" delay="20"]
[scetween mode="init" type="out"]
[scetween mode="add"  type="out" param="alpha"        ease="none"          diff="-255" msec="1000" delay="0"]
[scetween mode="add"  type="out" param="entirexscale" ease="easeout_quart" diff= "-50" msec="1000" delay="0"]
[scetween mode="add"  type="out" param="entireyscale" ease="easeout_quart" diff= "-50" msec="1000" delay="0"]

이것은 각 페이지의 중앙을 기점으로 2 배 크기에서 페이드 인 오는, 설정입니다. @ [rt]
백 로그보기도 비슷한 방식으로 설정할 수 있습니다. @ [rp]

테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 @ [rp]

[scetween mode="init" type="in" ]
[scetween mode="add"  type="in"  param="alpha"        ease="none"          diff="-255" msec= "400" delay="20"]
[scetween mode="add"  type="in"  param="entirexscale" ease="easeout_quart" diff= "100" msec="1000" delay="20"]
[scetween mode="add"  type="in"  param="entireyscale" ease="easeout_quart" diff= "100" msec="1000" delay="20"]
[scetween mode="add"  type="in"  param="entirerotate" ease="easeout_quart" diff="-360" msec="1000" delay="20"]
[scetween mode="init" type="out"]
[scetween mode="add"  type="out" param="alpha"        ease="none"          diff="-255" msec="1000" delay="0"]
[scetween mode="add"  type="out" param="entirexscale" ease="easeout_quart" diff= "-50" msec="1000" delay="0"]
[scetween mode="add"  type="out" param="entireyscale" ease="easeout_quart" diff= "-50" msec="1000" delay="0"]
[scetween mode="add"  type="out" param="entirerotate" ease="easeout_quart" diff= "360" msec="1000" delay="0"]

이것은 방금 설정 한 회전하면서 표시한다는 설정을 추가 한 것입니다. @ [rt]
보통의 시나리오 텍스트를 표시하는 것 같은 움직임은 없지만 궁리하기 나름으로 약간의 연출이나 간이적인 직원 신용 등에 사용할 수 있습니다. @ [rp]

테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 @ [rp]

// 축소
[scetween mode="init" type="in" ]
[scetween mode="add"  type="in"  param="top"   ease="easeout_quad"  diff="$-20 * g.vratio / 100" msec="400" delay="20"]
[scetween mode="add"  type="in"  param="alpha" ease="none"          diff="-255" msec="400" delay="20"]
[scetween mode="init" type="out"]
[scetween mode="add"  type="out" param="top"   ease="easeout_quad"  diff= "$20 * g.vratio / 100" msec="400" delay="0"]
[scetween mode="add"  type="out" param="alpha" ease="easeout_quart" diff="-255" msec="400" delay="0"]

ジャンプして[ruby text="さいしょ"]最初[/ruby]に[ruby text="もど"]戻[/ruby]ります。@

[jump label="menu"]

// ---------------------------------------------------------------------------------------------
// 이미지에 대해
// ---------------------------------------------------------------------------------------------
*image
[rp]
// ↑ 텍스트 링크 라벨에 점프 해 온 경우
// 링크가 부착되어 텍스트를 改頁 동작 지우지 않으면
// 링크가 있던 텍스트가 사라지지 않고 계속
// 다음 텍스트가 표시되어 버린다

// 본문을 초기화하기
[call label="text_init"]

이미지의 취급에 대해 설명합니다. @ [rt]
먼저 배경을 전환합니다. @ [rp]

[call label="mwout"]

// 0 번 레이어에 이미지를 로드
//이 시점에서는 아직 나타나지 않는
// 이것을 「뒤 화면에로드 "라고
[lyc id="0" file="$g.imagepath + 'artemis_bg'"]

// 2 초에 걸쳐 크로스 페이드로 화면에 표시
// 크로스 페이드 원래는 이전까지의 화면 (표 화면)에서
// 위치는 새로운 (artemis_bg 포함) 화면 (뒷면 화면)이되는
// 이것을 표 화면과 뒷면 화면 전환이란
// 전환이 완료되면 지금까지 뒤에서 화면였던 것이
// 테이블 화면이 뒤에서 화면은 표 화면과 같은 내용이된다
// (오래된 화면은 파기된다)
[trans type="1" time="2000"]

[call label="mwin"]

배경을 2 초 동안 크로스 페이드했습니다. @ [rt]
규칙 이미지라는 것을 사용하여 전환 할 수 있습니다. @ [rp]

[call label="mwout"]

// 0 번 레이어에 이미지를로드
[lyc id="0" file="$g.imagepath + 'artemis_logo'"]

// 규칙 이미지를 사용 전환
// "외부 전환」라고 부른다
// vague은 "모호함 값"(0 ~ 512)
//이 값을 변경하여 같은 규칙 이미지도
// 화면 전환 방법이 변화하는
[trans type="2" time="2000" rule="$g.imagepath + 'mask1'" vague="32"]

[lyc id="0" file="$g.imagepath + 'artemis_bg'"]
[trans type="2" time="2000" rule="$g.imagepath + 'mask2'" vague="32"]
[lyc id="0" file="$g.imagepath + 'artemis_logo'"]
[trans type="2" time="2000" rule="$g.imagepath + 'mask3'" vague="32"]
[lyc id="0" file="$g.imagepath + 'artemis_bg'"]
[trans type="2" time="2000" rule="$g.imagepath + 'mask4'" vague="128"]

[call label="mwin"]

배경을 2 초 동안 4 회 전환했습니다. @ [rp]

그런 캐릭터를 배경으로 겹쳐서 표시 보겠습니다. @ [rp]

[call label = "mwout"]

// 1 번 레이어에 캐릭터 이미지를로드
// 레이어의 겹침 순서는 id가 숫자이면 숫자 순서에
// id가 숫자가 아닌 (알파벳 등)를 포함하는 경우
// 알파벳 (또는 50 음순)이 될 때
[lyc id="1" file="$g.imagepath + 'artemis_chara'"]
[trans type="1" time="2000"]

[call label="mwin"]

\ Artemis Engine 마스코트의 아르테미스에요. @ [rp]

배경도 전경도 레이어라고합니다. @ [rt]
레이어에 위치 투명도 크기 각도의 4 가지 속성 (속성이라고합니다)이 있습니다. @ [rt]
이들을 변화시키는 것으로, 레이어의 표시 상태를 변화시킬 수 있습니다. @ [rp]

우왕좌왕 ... [wait time = "0"]

// 왼쪽 위치를 변화시키는
[lyprop id="1" left="$-120 * g.hratio / 100"]
[trans type="1" time="1000"]
[lyprop id="1" left="$120 * g.hratio / 100"]
[trans type="1" time="1000"]
[lyprop id="1" left="$-120 * g.hratio / 100"]
[trans type="1" time="1000"]
[lyprop id="1" left="$120 * g.hratio / 100"]
[trans type="1" time="1000"]
[lyprop id="1" left="0"]
[trans type="1" time="1000"]

경경…[wait time="0"] //뭐라 씨불싸는거지...

// 투명도를 변화시킨다 (0 ~ 255)
[lyprop id="1" alpha="128"]
[trans type="1" time="1000"]
[lyprop id="1" alpha="255"]
[trans type="1" time="1000"]
[lyprop id="1" alpha="128"]
[trans type="1" time="1000"]
[lyprop id="1" alpha="255"]
[trans type="1" time="1000"]

원근…[wait time="0"]

// 비율을 변화시키는 (백분율)
[lyprop id="1" xscale="50" yscale="50" top="0"]
[trans type="1" time="1000"]
[lyprop id="1" xscale="200" yscale="200" top="$160 * g.vratio / 100"] // 顔がアップになるよう上端位置をずらす
[trans type="1" time="1000"]
[lyprop id="1" xscale="50" yscale="50" top="0"]
[trans type="1" time="1000"]
[lyprop id="1" xscale="200" yscale="200" top="$160 * g.vratio / 100"]
[trans type="1" time="1000"]
[lyprop id="1" xscale="100" yscale="100" top="0"]
[trans type="1" time="1000"]

흔들 흔들…[wait time="0"]

// 회전 각도를 변화시킨다 (도)
[lyprop id="1" rotate="-45"]
[trans type="1" time="1000"]
[lyprop id="1" rotate="45"]
[trans type="1" time="1000"]
[lyprop id="1" rotate="-45"]
[trans type="1" time="1000"]
[lyprop id="1" rotate="45"]
[trans type="1" time="1000"]
[lyprop id="1" rotate="0"]
[trans type="1" time="1000"]

등. @ [rp]

레이어는 매수 제한은 없지만 iPhone / iPad 실기의 성능이 사실상 제한됩니다. @ [rt]
추가로 캐릭터를 2 장로드 봅니다. @ [rp]

[call label="mwout"]

// 좌우로 캐릭터를로드
[lyc id="2" file="$g.imagepath + 'artemis_chara'"]
[lyprop id="2" left="$-120 * g.hratio / 100"]
[lyc id="3" file="$g.imagepath + 'artemis_chara'"]
[lyprop id="3" left="$120 * g.hratio / 100"]
[trans type="1" time="2000"]

[call label="mwin"]

실제로 iPhone 3G에서는 배경 + 캐릭터 3 개 + 메시지 창 정도가 한계입니다. @ [rp]

마지막으로 가져온 캐릭터를 삭제합니다. @ [rp]

[call label="mwout"]

// 레이어 삭제
[lydel id="1"]
[lydel id="2"]
[lydel id="3"]
// 배경 로고 취소
[lyc id="0" file="$g.imagepath + 'artemis_logo'"]
// 화면에 반영
[trans type="1" time="2000"]

[call label="mwin"]

ジャンプして[ruby text="さいしょ"]最初[/ruby]に[ruby text="もど"]戻[/ruby]ります。@

[jump label="menu"]

// ---------------------------------------------------------------------------------------------
// 이미지에 대해 (트윈 편)
// ---------------------------------------------------------------------------------------------
*tween
[rp]
// ↑ 텍스트 링크 라벨에 점프 해 온 경우
// 링크가 부착되어 텍스트를 改頁 동작 지우지 않으면
// 링크가 있던 텍스트가 사라지지 않고 계속
// 다음 텍스트가 표시되어 버린다

// 본문을 초기화하기
[call label="text_init"]

[lyc id="0" file="$g.imagepath + 'artemis_bg'"]
[trans type="1" time="1000"]

이미지에 대한 기본 설치가 전제의 내용입니다. @ [rp]

레이어의 속성은 트윈라는 구조를 사용하여 연속적으로 변화시킬 수 있습니다. @ [rt]
예를 들어, 화면 밖에서 캐릭터를 밀어 등장시켜보십시오. @ [rp]

[call label="mwout"]

// 캐릭터를 읽어 들여 ...
[lyc id="1" file="$g.imagepath + 'artemis_chara'"]
// 화면 외의 위치로 이동시켜 ...
[lyprop id="1" left="$-480 * g.hratio / 100"]
// 뒤 화면을 표 화면으로 전환합니다
//이 때 [trans type = "0"을 사용하는 것
// [flip을 사용하는 것이 좋습니다
[flip]

// 트윈을 설정하여 트윈을 완료 스크립트를 진행하지 않도록합니다
// 이것을 싱크라고합니다
// 아래는 왼쪽 위치를, -480에서 0에 2 초에 걸쳐, 변화시킵니다
[lytween id="1" param="left" from="$-480 * g.hratio / 100" to="0" msec="2000" sync="1"]

[call label="mwin"]

트윈을 사용하면 전환을 이용하지 않고 화면 변화를 표현할 수 있습니다. @ [rp]

트윈 의한 값의 변화는 완급 등을 쓸 수도 있습니다. @ [rp]

[call label="mwout"]

[lytween id="1" param="left" ease="easein_quint"   from="0" to="$480 * g.hratio / 100"  msec="2000" sync="1"]
[lytween id="1" param="left" ease="easeout_quint"  from="$480 * g.hratio / 100"  to="0" msec="2000" sync="1"]
[lytween id="1" param="top"  ease="easein_elastic" from="0" to="$-320 * g.vratio / 100" msec="2000" sync="1"]
[lytween id="1" param="top"  ease="easeout_bounce" from="$-320 * g.vratio / 100" to="0" msec="2000" sync="1"]

[call label="mwin"]

여러 속성 변화를 결합 할 수 있습니다. @ [rp]

[call label="mwout"]

[lytween id="1" param="top"    from="0"   to="$320 * g.vratio / 100" msec="2000"] // 同時に実行したいので sync="1" はつけない
[lytween id="1" param="xscale" from="100" to="400" msec="2000"] // 同時に実行したいので sync="1" はつけない
[lytween id="1" param="yscale" from="100" to="400" msec="2000" sync="1"]

[lytween id="1" param="top"    from="$320 * g.vratio / 100" to="0" msec="2000"] // 同時に実行したいので sync="1" はつけない
[lytween id="1" param="xscale" from="400" to="100" msec="2000"] // 同時に実行したいので sync="1" はつけない
[lytween id="1" param="yscale" from="400" to="100" msec="2000" sync="1"]

[call label="mwin"]

여러 번 반복을 지정할 수도 있습니다. @ [rp]

[call label="mwout"]

[lytween id="1" param="rotate" from="0" to="359" msec="1000" repeat="3" sync="1"]

[call label="mwin"]

반복 방법을 "요요"할 수 있습니다. @ [rp]

[call label="mwout"]

[lytween id="1" param="alpha" from="255" to="128" msec="1000" yoyo="3" sync="1"]

// 直前のlytweenのtoが128(半透明)のため、lytween完了後に常に255(不透明)に戻るよう
// レイヤープロパティ設定を行っておく
[lyprop id="1" alpha="255"]

[call label="mwin"]

シナリオ進行と同期をとらずに、シナリオを進めつつ背後で動いている、というような表現も可能です。@[rp]

// yoyo과 repeat -1을 지정하면 트윈 계속
[lytween id="1" param="top"    from="0"   to="$320 * g.hratio / 100" msec="2000" yoyo="-1"]
[lytween id="1" param="xscale" from="100" to= "400" msec="2000" yoyo="-1"]
[lytween id="1" param="yscale" from="100" to= "400" msec="2000" yoyo="-1"]

테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 @ [rp]
테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 @ [rp]
테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 @ [rp]
테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 테스트 @ [rp]

// 트윈시키면서 페이드 아웃시키기 위해 투명도를 트위닝
[lytween id="1" param="alpha" from="255" to="0" msec="2000" sync="1"]
// yoyo과 repeat -1이 지정된 트윈을 중지하려면 lytweendel를 사용
[lytweendel id="1"]

// 이미 투명도 트윈으로 화면에 보이지 않기 때문에,
// 단순히 제거하고 뒷면 화면과 테이블 화면을 전환 (전환은 필요 없다)
[lydel id="1"]
[flip]

ジャンプして[ruby text="さいしょ"]最初[/ruby]に[ruby text="もど"]戻[/ruby]ります。@

[jump label="menu"]

// ---------------------------------------------------------------------------------------------
// 사운드에 대해
// ---------------------------------------------------------------------------------------------
*sound
[rp]
//가젤의 노트. 이 밑은 다 졸라 쓸대없는 내용이라(주관적으로...?) 기냥 생략 할게요. 효과음 뭐 이런 부분이에요.
//LUA는 필요없다 생각해서 생략해요. 만약 원하신다 하시면 번역해드릴게요.........랄까
//아마 그냥 복붙해서 번역기에 떄리면 된다고는 생각해요. 스크립트 부분이 좀 오류나서 그냥 보기만 하는게...

// ↑ 텍스트 링크 라벨에 점프 해 온 경우
// 링크가 부착되어 텍스트를 改頁 동작 지우지 않으면
// 링크가 있던 텍스트가 사라지지 않고 계속
// 다음 텍스트가 표시되어 버린다

// 本文を初期化する
[call label="text_init"]

// BGMを再生
[splay file="bgm0"]

\BGMを再生しています。@[rt]
\BGMは、Windows版ではwavとogg形式が、@iOS版ではwav,mp3,aac形式等が使えます。@[rt]
\Windows版でmp3が使えないのはライセンスの問題があるためです。@[rt]
\iOS版でoggが使えないのは、デコード処理の負荷が高すぎて、実用的でないからです。@[rp]

// BGMを停止
[sstop]

\BGMは、通常再生、通常停止のほか、@

// BGMを2秒間フェードインしながら再生
[sfadein file="bgm0" time="2000"]
フェードインしながら再生したり、
// 4秒間待機する
[wait time="4000"]
// BGMを2秒間クロスフェードしながら別の曲を再生
[sxfade file="bgm1" time="2000"]
クロスフェード(Windows版のみ)しながら別の曲に切り替えたり、
// 4秒間待機する
[wait time="4000"]
// BGMを2秒間フェードアウトさせて停止
[sfadeout time="2000"]
フェードアウトしながら停止したりできます。
// 4秒間待機する
[wait time="4000"]
@[rp]

// BGMを2秒間フェードインしながら再生
[sfadein file="bgm0" time="2000"]
// SEを再生
[seplay id="0" file="se0"]
効果音は、Windowsで版ではBGMと同様の形式が使えますが、@
// SEを再生
[seplay id="0" file="se0"]
\iOS版ではwavとcaf形式しか使えません。@[rt]
// SEを再生
[seplay id="0" file="se0"]
これは、iPhone/iPadが複数のmp3やaacの再生に対応していないためです。@[rt]
// SEを再生
[seplay id="0" file="se0"]
iOS版では圧縮フォーマットがIMA-4のcaf形式が推奨されます。@[rp]

// SEをループ再生
[seplay id="1" file="se1" loop="1"]
効果音は、ループ再生することが可能です。@[rt]
// SEを再生
[seplay id="0" file="se0"]
多重再生することも可能です。@[rt]
// SEを再生
[seplay id="0" file="se0"]
しかし、iPhone 3Gではあまり多くの多重再生を行うと、とても重くなってしまいます。@[rp]

// ループ再生していたSEを停止
[sestop id="1"]
// BGMを2秒間フェードアウトさせて停止
[sfadeout time="2000"]

ボイスについては、特にボイス専用のタグはありませんが、@効果音として扱い、マクロを工夫することで、実現可能です。@[rp]

ジャンプして[ruby text="さいしょ"]最初[/ruby]に[ruby text="もど"]戻[/ruby]ります。@

[jump label="menu"]

// ---------------------------------------------------------------------------------------------
//  文字入力について
// ---------------------------------------------------------------------------------------------
*input
[rp]
// ↑テキストリンクでラベルにジャンプしてきた場合、
//   リンクがはられていたテキストを改頁動作で消さないと、
//   リンクがはられていたテキストが消えず続けて
//   次のテキストが表示されてしまう

// 本文を初期化する
[call label="text_init"]

プレイヤーに文字入力させることができます。@[rp]

[ime varname="ime"][rp]
[print data="$ime"] と入力されました。@[rp]

ジャンプして[ruby text="さいしょ"]最初[/ruby]に[ruby text="もど"]戻[/ruby]ります。@

[jump label="menu"]

// ---------------------------------------------------------------------------------------------
//  Luaスクリプトについて
// ---------------------------------------------------------------------------------------------
*lua
[rp]
// ↑テキストリンクでラベルにジャンプしてきた場合、
//   リンクがはられていたテキストを改頁動作で消さないと、
//   リンクがはられていたテキストが消えず続けて
//   次のテキストが表示されてしまう

// 本文を初期化する
[call label="text_init"]

// プラットフォームを取得する
[var name="os" system="os"]

[if estimate="$os == 'windows'"]
	// Windowsのときの処理
	このスクリプトはiPhone/iPad実機でのみ動作します。@
[/if]
[if estimate="$os == 'iphone'"]
	// iPhoneのときの処理
	[lua]
	-- 毎フレーム呼び出される関数
	function onFourTouchToMenu(e)
		-- 現在のタッチ数を取得する
		touchCount = e:getTouchCount()
		-- デバッグのためコンソールに情報を出力する
		e:debug("touchCount: " .. touchCount)

		if(touchCount == 4)then
			-- イベントハンドラを削除する
			-- 削除する場合は空文字列にすればよい
			e:setEventHandler{ onEnterFrame = "" }
			-- jumpタグを実行する
			e:tag{ "jump", label = "menu" }
		end
	end
	-- callluaタグによって呼び出す予定の関数
	function setFourTouchToMenu(e)
		-- イベントハンドラをセットする
		-- イベントハンドラの関数名を渡す
		e:setEventHandler{ onEnterFrame = "onFourTouchToMenu" }
	end
	[/lua]
	[calllua function="setFourTouchToMenu"]

	４本指でタッチすると最初に戻ります。
	[stop]
[/if]

[jump label="menu"]

// ---------------------------------------------------------------------------------------------
